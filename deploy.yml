---
- name: build {{ domain_name }}
  hosts: localhost
  become: no
  gather_facts: false

  tasks:
    - stat:
        path: "sites/{{ domain_name }}/mkdocs.yml"
      register: stat

    - assert:
        that: stat.stat.exists
        msg: "{{ stat.stat.path }} does not exist."

    - tempfile:
        state: directory
      register: local_tmp

    # To persist across plays.
    - set_fact:
        tmp: "{{ local_tmp.path }}"

    - shell: mkdocs build --strict --site-dir {{ local_tmp.path }}
      args:
        chdir: "sites/{{ domain_name }}"

- name: deploy {{ domain_name }}
  hosts: all
  remote_user: keith
  become: yes
  gather_facts: false

  vars:
    ansible_python_interpreter: /usr/local/bin/python

    # domain_name comes in from the invocation.
    vhosts_root: /usr/local/www
    webserver_config_root: /usr/local/etc/nginx
    tls_root: /usr/local/etc/ssl/acme
    logs_root: /var/log/www
    tmp: "{{ hostvars.localhost.tmp }}"

  tasks:
    - name: ensure target directories exist
      file:
        dest: '{{ item }}'
        state: directory
        owner: www
        group: wheel
        mode: 0755
      with_items:
        - '{{ vhosts_root }}/{{ domain_name }}/web'
        - '{{ webserver_config_root }}/vhosts'
        - '{{ logs_root }}'

    - name: copy up vhost config
      template:
        src: vhost.conf.j2
        dest: '{{ webserver_config_root }}/vhosts'
      notify:
        - reload nginx

    - name: copy up site
      synchronize:
        src: "{{ tmp }}/"
        dest: "{{ vhosts_root }}/{{ domain_name }}/web"
        group: no
        owner: no
        perms: no
        delete: yes

  handlers:
    - name: reload nginx
      service:
        name: nginx
        state: reloaded
